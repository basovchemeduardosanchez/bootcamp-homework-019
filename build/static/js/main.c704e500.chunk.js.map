{"version":3,"sources":["components/NavBar.js","components/Footer/index.js","components/SearchControl.js","components/SortControl.js","components/Toolbar.js","components/Employee.js","components/SearchResults.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Footer","SearchControl","props","htmlFor","id","type","onChange","handler","value","search","placeholder","SortControl","sorting","properties","map","pProperty","key","replace","pMatch","toUpperCase","Toolbar","onSubmit","searchHandler","sortingProperties","sortingHandler","Employee","src","picture","alt","name","title","location","timezone","email","phone","cell","SearchResults","results","result","Directory","state","data","dataFields","getSortedObjectArray","pArray","pSortProperty","sort","pA","pB","lA","String","lB","localeCompare","handleSorting","pEvent","lSortProperty","target","setState","handleSearch","lSearch","filter","pEmployee","lResult","lUppercaseSearch","includes","first","last","large","city","country","offset","description","lMappedData","this","getMappedData","Object","keys","pValue","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c704e500.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NavBar(){\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">\n                My Company\n            </a>\n        </nav>\n    );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './index.css';\n\nfunction Footer(){\n    return (\n        <footer className=\"footer bg-dark\">\n            <div className=\"container\">\n                <span className=\"text-white\">\n                    &copy; 2020 My Company\n                </span>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction SearchControl( props ){\n    return (\n        <div className=\"form-group mb-4\">\n            <label htmlFor=\"search\">\n                Search\n            </label>\n            {/* <div className=\"input-group\"> */}\n                <input id=\"search\" className=\"form-control form-control-lg\" type=\"text\" onChange={props.handler} value={props.search} placeholder=\"Type a name, email or phone\" />\n                {/* <div className=\"input-group-append\">\n                    <button className=\"btn btn-primary\" type=\"submit\" title=\"search\">\n                        <span className=\"fa fa-search\"></span>\n                    </button>\n                </div> */}\n            {/* </div> */}\n        </div>\n    );\n}\n\nexport default SearchControl;","import React from 'react';\n\nfunction SortControl( props ){\n    return (\n        <div className=\"form-group mb-4\">\n            <label htmlFor=\"search\">\n                Sort By\n            </label>\n            <select className=\"form-control form-control-lg\" value={props.sorting} onChange={props.handler}>\n                {\n                    props.properties.map( ( pProperty ) => {\n                        return <option key={pProperty} value={pProperty}>\n                            {pProperty.replace( /^./, ( pMatch ) => pMatch.toUpperCase() )}\n                        </option>\n                    } )\n                }\n            </select>\n        </div>\n    );\n}\n\nexport default SortControl;","import React from 'react';\nimport SearchControl from './SearchControl';\nimport SortControl from './SortControl';\n\nfunction Toolbar( props ){\n    return (\n        <form onSubmit={props.handler}>\n            <SearchControl search={props.search} handler={props.searchHandler} />\n            <SortControl sorting={props.sorting} properties={props.sortingProperties} handler={props.sortingHandler} />\n        </form>\n    );\n}\n\nexport default Toolbar;\n","import React from 'react';\n\nfunction Employee( props ){\n    return (\n        <div className=\"col mb-4\">\n            <div className=\"card shadow text-dark border-0\">\n                <img className=\"card-img-top\" src={props.picture} alt={props.name} />\n                <div className=\"card-body border-bottom\">\n                    <h4 className=\"card-title text-truncate mb-0\" title={props.name}>\n                        {props.name}\n                    </h4>\n                    <h5 className=\"text-truncate\" title={props.location}>\n                        {props.location}\n                    </h5>\n                    <h6 className=\"text-truncate\" title={props.timezone}>\n                        Local Time: {props.timezone}\n                    </h6>\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item bg-light text-truncate\">\n                        <a className=\"text-dark\" href={'mailto:' + props.email} title={props.email}>\n                            <span className=\"fa fa-envelope-o\"></span>&nbsp; {props.email}\n                        </a>\n                    </li>\n                    <li className=\"list-group-item bg-light text-truncate\">\n                        <a className=\"text-dark\" href={'tel:' + props.phone} title={props.phone}>\n                            <span className=\"fa fa-phone\"></span>&nbsp; {props.phone}\n                        </a>\n                    </li>\n                    <li className=\"list-group-item bg-light text-truncate\">\n                        <a className=\"text-dark\" href={'tel:' + props.cell} title={props.cell}>\n                            <span className=\"fa fa-mobile\"></span>&nbsp; {props.cell}\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default Employee;\n","import React from 'react';\nimport Employee from './Employee';\n\nfunction SearchResults( props ){\n    return (\n        <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3\">\n            {\n                props.results.map( ( result ) => {\n                    return <Employee\n                        // React requires a key property for lists of elements, otherwise it throws an error in the console\n                        key={result.email}\n                        {...result}\n                    />;\n                } )\n            }\n        </div>\n    );\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport Toolbar from './Toolbar';\nimport SearchResults from './SearchResults';\nimport { results as data } from '../data.json';\n\nclass Directory extends React.Component {\n    state = {\n        search: '',\n        sorting: '',\n        data: [],\n        dataFields: [],\n        results: [],\n    }\n\n    getMappedData(){\n        // Data obtained from https://randomuser.me/api/?results=100\n        let lResult = data.map( ( pEmployee ) => {\n            // Transform the data into useful data for our purposes\n            return {\n                name: `${pEmployee.name.first} ${pEmployee.name.last}`,\n                email: pEmployee.email,\n                phone: pEmployee.phone,\n                cell: pEmployee.cell,\n                picture: pEmployee.picture.large,\n                location: `${pEmployee.location.city}, ${pEmployee.location.state}, ${pEmployee.location.country}`,\n                timezone: `(UTC ${pEmployee.location.timezone.offset}) ${pEmployee.location.timezone.description}`\n            };\n        } );\n        return lResult;\n    }\n\n    getSortedObjectArray = ( pArray, pSortProperty ) => {\n        return pArray.sort( ( pA, pB ) => {\n            // Convert to uppercase for case insensitive comparison\n            let lA = String( pA[ pSortProperty ] ).toUpperCase(),\n                lB = String( pB[ pSortProperty ] ).toUpperCase();\n            // Compare the strings and sort alphabetically\n            return lA.localeCompare( lB );\n        } );\n    }\n    handleSorting = ( pEvent ) => {\n        let lSortProperty = pEvent.target.value;\n\n        this.setState( { sorting: lSortProperty, results: this.getSortedObjectArray( this.state.results, lSortProperty ) } );\n    }\n    handleSearch = ( pEvent ) => {\n        let lSearch = pEvent.target.value;\n\n        this.setState( { search: lSearch, results: this.state.data.filter( ( pEmployee ) => {\n            // Result will be false unless setting it to true below\n            let lResult = false,\n                lUppercaseSearch = lSearch.toUpperCase();\n\n            if (\n                pEmployee.name.toUpperCase().includes( lUppercaseSearch )\n                || pEmployee.email.toUpperCase().includes( lUppercaseSearch )\n                || pEmployee.location.toUpperCase().includes( lUppercaseSearch )\n                || pEmployee.timezone.toUpperCase().includes( lUppercaseSearch )\n                // Remove all non-digits\n                || pEmployee.phone.replace(/[^0-9]/, '').includes( lUppercaseSearch )\n                // Remove all non-digits\n                || pEmployee.cell.replace(/[^0-9]/, '').includes( lUppercaseSearch )\n            ){\n                lResult = true;\n            }\n\n            return lResult;\n        } ) } );\n    }\n    componentDidMount(){\n        let lMappedData = this.getMappedData(),\n            lSorting = 'name';\n        // Start the app by showing everyone\n        this.setState( {\n            data: lMappedData,\n            results: this.getSortedObjectArray( lMappedData, lSorting ),\n            sorting: lSorting,\n            // Set the fields to the keys of the first element in the data array\n            dataFields: Object.keys( lMappedData[0] )\n        } );\n    }\n    render(){\n        return (\n            <div className=\"container text-white mt-4\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h1>Directory</h1>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Toolbar\n                            search={this.state.search}\n                            searchHandler={this.handleSearch}\n                            sorting={this.state.sorting}\n                            sortingProperties={ this.state.dataFields.filter( ( pValue ) => ![ 'picture' ].includes( pValue ) ) }\n                            sortingHandler={this.handleSorting}\n                        />\n                        <SearchResults results={this.state.results} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Directory","import React from 'react';\nimport NavBar from './components/NavBar.js';\nimport Footer from './components/Footer/index.js';\nimport Directory from './components/Directory.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Directory />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}